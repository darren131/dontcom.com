<!-- Media carousel component for displaying multiple images -->
<script webc:setup>
  // Simple state management
  this.state = {
    currentIndex: 0,
    totalSlides: 0
  };

  // Event handlers
  this.handleNext = () => {
    this.state.currentIndex = (this.state.currentIndex + 1) % this.state.totalSlides;
    this.updateDisplay();
  };

  this.handlePrev = () => {
    this.state.currentIndex = (this.state.currentIndex - 1 + this.state.totalSlides) % this.state.totalSlides;
    this.updateDisplay();
  };

  // Display updates
  this.updateDisplay = () => {
    const slides = this.querySelectorAll('.carousel-slide');
    slides.forEach((slide, index) => {
      slide.style.display = index === this.state.currentIndex ? 'block' : 'none';
    });
    
    const counter = this.querySelector('.carousel-counter');
    if (counter) {
      counter.textContent = `${this.state.currentIndex + 1} / ${this.state.totalSlides}`;
    }
  };

  // Initialization
  this.init = () => {
    const slides = this.querySelectorAll('.carousel-slide');
    this.state.totalSlides = slides.length;
    
    if (this.state.totalSlides > 1) {
      const controls = this.querySelector('.carousel-controls');
      const counter = this.querySelector('.carousel-counter');
      controls.classList.add('visible');
      counter.classList.add('visible');
      this.updateCounter();
    }
    
    this.updateDisplay();
  };
</script>

<style>
  :host {
    display: block;
    width: 100%;
    margin: var(--space-s) 0;
  }

  .carousel-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    display: block;
    background: var(--color-bg-accent);
    border-radius: var(--border-radius-medium);
    overflow: hidden;
  }

  .carousel-slide {
    display: none;
    width: 100%;
  }

  .carousel-slide:first-child {
    display: block;
  }

  .carousel-slide img {
    width: 100%;
    height: auto;
    border-radius: var(--border-radius-medium);
    display: block;
    max-width: 100%;
    aspect-ratio: 16/9;
    object-fit: cover;
  }

  .carousel-controls {
    display: none;
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    justify-content: space-between;
    padding: 0 1rem;
    z-index: 10;
  }

  .carousel-controls.visible {
    display: flex;
  }

  .carousel-button {
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius-medium);
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .carousel-button:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  .carousel-counter {
    display: none;
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius-medium);
    font-size: 0.875rem;
    z-index: 10;
  }

  .carousel-counter.visible {
    display: block;
  }
</style>

<div class="carousel-container">
  <slot></slot>
  <div class="carousel-controls">
    <button class="carousel-button" @click="handlePrev">←</button>
    <button class="carousel-button" @click="handleNext">→</button>
  </div>
  <div class="carousel-counter"></div>
</div>

<script webc:raw>
  // Initialize the carousel after the component is mounted
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('custom-carousel').forEach(carousel => {
      if (typeof carousel.init === 'function') {
        carousel.init();
      }
    });
  });
</script> 